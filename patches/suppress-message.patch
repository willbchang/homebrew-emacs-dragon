diff --git a/lisp/international/mule.el b/lisp/international/mule.el
index 8978a97..f52de1e 100644
--- a/lisp/international/mule.el
+++ b/lisp/international/mule.el
@@ -312,10 +312,6 @@ Return t if file exists."
     (let ((buffer (generate-new-buffer " *load*"))
           (load-in-progress t)
           (source (string-suffix-p ".el" fullname)))
-      (unless nomessage
-	(if source
-	    (message "Loading %s (source)..." file)
-	  (message "Loading %s..." file)))
       (when purify-flag
 	(push (purecopy file) preloaded-file-list))
       (unwind-protect
@@ -359,11 +355,6 @@ Return t if file exists."
 	(let (kill-buffer-hook kill-buffer-query-functions)
 	  (kill-buffer buffer)))
       (do-after-load-evaluation fullname)
-
-      (unless (or nomessage noninteractive)
-	(if source
-	    (message "Loading %s (source)...done" file)
-	  (message "Loading %s...done" file)))
       t)))
 
 (defun charset-info (charset)
diff --git a/lisp/org/ob-tangle.el b/lisp/org/ob-tangle.el
index 566258e..e8b721d 100644
--- a/lisp/org/ob-tangle.el
+++ b/lisp/org/ob-tangle.el
@@ -280,14 +280,6 @@ matching a regular expression."
 	 (if (equal arg '(4))
 	     (org-babel-tangle-single-block 1 t)
 	   (org-babel-tangle-collect-blocks lang-re tangle-file)))
-	(message "Tangled %d code block%s from %s" block-counter
-		 (if (= block-counter 1) "" "s")
-		 (file-name-nondirectory
-		  (buffer-file-name
-		   (or (buffer-base-buffer)
-                       (current-buffer)
-                       (and (org-src-edit-buffer-p)
-                            (org-src-source-buffer))))))
 	;; run `org-babel-post-tangle-hook' in all tangled files
 	(when org-babel-post-tangle-hook
 	  (mapc
diff --git a/lisp/org/org.el b/lisp/org/org.el
index 4755bca..b1ed1c3 100644
--- a/lisp/org/org.el
+++ b/lisp/org/org.el
@@ -246,10 +246,8 @@ byte-compiled before it is loaded."
     (if compile
 	(progn
 	  (byte-compile-file tangled-file)
-	  (load tangled-file)
-	  (message "Compiled and loaded %s" tangled-file))
-      (load-file tangled-file)
-      (message "Loaded %s" tangled-file))))
+	  (load tangled-file))
+      (load-file tangled-file))))
 
 (defcustom org-babel-load-languages '((emacs-lisp . t))
   "Languages which can be evaluated in Org buffers.
@@ -6466,9 +6464,7 @@ Use `\\[org-edit-special]' to edit table.el tables"))
       ;; We just created the overview - now do table of contents
       ;; This can be slow in very large buffers, so indicate action
       (run-hook-with-args 'org-pre-cycle-hook 'contents)
-      (unless ga (org-unlogged-message "CONTENTS..."))
       (org-content)
-      (unless ga (org-unlogged-message "CONTENTS...done"))
       (setq org-cycle-global-status 'contents)
       (run-hook-with-args 'org-cycle-hook 'contents))
 
@@ -6477,7 +6473,6 @@ Use `\\[org-edit-special]' to edit table.el tables"))
       ;; We just showed the table of contents - now show everything
       (run-hook-with-args 'org-pre-cycle-hook 'all)
       (org-show-all '(headings blocks))
-      (unless ga (org-unlogged-message "SHOW ALL"))
       (setq org-cycle-global-status 'all)
       (run-hook-with-args 'org-cycle-hook 'all))
 
@@ -6485,7 +6480,6 @@ Use `\\[org-edit-special]' to edit table.el tables"))
       ;; Default action: go to overview
       (run-hook-with-args 'org-pre-cycle-hook 'overview)
       (org-overview)
-      (unless ga (org-unlogged-message "OVERVIEW"))
       (setq org-cycle-global-status 'overview)
       (run-hook-with-args 'org-cycle-hook 'overview)))))
 
@@ -6534,7 +6528,6 @@ Use `\\[org-edit-special]' to edit table.el tables"))
       ;; Nothing is hidden behind this heading
       (unless (org-before-first-heading-p)
 	(run-hook-with-args 'org-pre-cycle-hook 'empty))
-      (org-unlogged-message "EMPTY ENTRY")
       (setq org-cycle-subtree-status nil)
       (save-excursion
 	(goto-char eos)
@@ -6565,7 +6558,6 @@ Use `\\[org-edit-special]' to edit table.el tables"))
 		(dolist (e (org-list-get-all-items (point) struct prevs))
 		  (org-list-set-item-visibility e struct 'folded))
 		(goto-char (if (< end eos) end eos)))))))
-      (org-unlogged-message "CHILDREN")
       (save-excursion
 	(goto-char eos)
 	(outline-next-heading)
@@ -6581,8 +6573,6 @@ Use `\\[org-edit-special]' to edit table.el tables"))
       (unless (org-before-first-heading-p)
 	(run-hook-with-args 'org-pre-cycle-hook 'subtree))
       (org-flag-region eoh eos nil 'outline)
-      (org-unlogged-message
-       (if children-skipped "SUBTREE (NO CHILDREN)" "SUBTREE"))
       (setq org-cycle-subtree-status 'subtree)
       (unless (org-before-first-heading-p)
 	(run-hook-with-args 'org-cycle-hook 'subtree)))
@@ -6590,7 +6580,6 @@ Use `\\[org-edit-special]' to edit table.el tables"))
       ;; Default action: hide the subtree.
       (run-hook-with-args 'org-pre-cycle-hook 'folded)
       (org-flag-region eoh eos t 'outline)
-      (org-unlogged-message "FOLDED")
       (setq org-cycle-subtree-status 'folded)
       (unless (org-before-first-heading-p)
 	(run-hook-with-args 'org-cycle-hook 'folded))))))
diff --git a/lisp/startup.el b/lisp/startup.el
index a91175b..5a35b52 100644
--- a/lisp/startup.el
+++ b/lisp/startup.el
@@ -65,21 +65,21 @@ string or function value that this variable has."
 (defvaralias 'inhibit-splash-screen 'inhibit-startup-screen)
 (defvaralias 'inhibit-startup-message 'inhibit-startup-screen)
 
-(defcustom inhibit-startup-screen nil
+(defcustom inhibit-startup-screen t
   "Non-nil inhibits the startup screen.
 
 This is for use in your personal init file (but NOT site-start.el),
 once you are familiar with the contents of the startup screen."
   :type 'boolean)
 
-(defvar startup-screen-inhibit-startup-screen nil)
+(defvar startup-screen-inhibit-startup-screen t)
 
 ;; The mechanism used to ensure that only end users can disable this
 ;; message is not complex.  Clearly, it is possible for a determined
 ;; system administrator to inhibit this message anyway, but at least
 ;; they will do so with knowledge of why the Emacs developers think
 ;; this is a bad idea.
-(defcustom inhibit-startup-echo-area-message nil
+(defcustom inhibit-startup-echo-area-message t
   "Non-nil inhibits the initial startup echo area message.
 
 The startup message is in the echo area as it provides information
@@ -1548,11 +1548,7 @@ Changed settings will be marked as \"CHANGED outside of Customize\"."
 	   `((changed ((t :background ,color)))))
       (put 'cursor 'face-modified t))))
 
-(defcustom initial-scratch-message (purecopy "\
-;; This buffer is for text that is not saved, and for Lisp evaluation.
-;; To create a file, visit it with \\[find-file] and enter text in its buffer.
-
-")
+(defcustom initial-scratch-message nil
   "Initial documentation displayed in *scratch* buffer at startup.
 If this is nil, no message will be displayed."
   :type '(choice (text :tag "Message")
@@ -2356,7 +2352,6 @@ A fancy display is used on graphic displays, normal otherwise."
 
 (defun command-line-1 (args-left)
   "A subroutine of `command-line'."
-  (display-startup-echo-area-message)
   (when (and pure-space-overflow
 	     (not noninteractive)
              ;; If we were dumped with pdumper, we don't care about
diff --git a/src/fileio.c b/src/fileio.c
index afdf4b1..78d9196 100644
--- a/src/fileio.c
+++ b/src/fileio.c
@@ -5501,14 +5501,6 @@ write_region (Lisp_Object start, Lisp_Object end, Lisp_Object filename,
       return Qnil;
     }
 
-  if (!auto_saving && !noninteractive)
-    message_with_string ((NUMBERP (append)
-			  ? "Updated %s"
-			  : ! NILP (append)
-			  ? "Added to %s"
-			  : "Wrote %s"),
-			 visit_file, 1);
-
   return Qnil;
 }
 
